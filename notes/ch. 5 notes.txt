In this chapter:

Q: What is the difference between acceptance specs and unit specs?
    acceptance specs are types of tests that validate the behavior of the end-product (end to end (touching multiple layers/ microservices in project))
    unit specs isolate the test as much as possible to test for functionality of for example the API (endpoint functionality test only)

Q2: How to use dependency injection to write flexible testable code

Q3: The use of test doubles / mock objects to stand in for real ones

Q4: How to refactor your specs to keep them clean and readable


Unit specs:
    - tests that involve isolating a class or method from the rest of code
    - the result is faster tests and easier to find errors
    - unit spec (in this book) referred to as the fastest, most isolated set of tests
    for a particular project

:: A Better Testing Experience ::
    - Rspec by default does these for you (out of the box): (rspec --init command does this for us but comments them out)
        1. Run RSpec without any changes to Ruby core classes
        2. Use the more verbose documentation formatter when you're just running one spec file
        3. Run your specs in random order

Dependency Injection:
    - this type of technique passes in collaborating objects instead of hard-coding them (DI for short)
    Q: What are the advantages of Dependency Injection in Ruby?
    A: 
        1. Explicit Dependencies: they're documented right there in the signature of initialize
        2. Code that's easier to reason about (no global state)
        3. Libraries that are easier to drop into another project (portability)
        4. More testable


:: Test Doubles: Mocks, Stubs, and Others ::
    - A Test Double is an object that stands in for another one during a test (also known as a fixture)
    - Testers refer to them as mocks, stubs, fakes, or spies
    - RSpec refers to these guys as Doubles

    - RSpec problem called verifying doubles
        - they help prevent fragile mocks, a problem where specs pass when they should be failing

    - Test doubles mimic the interface of a real object.
