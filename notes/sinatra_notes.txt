What is Sinatra?
    - It is a DSL (Domain-specific language) for quickly creating
    web applications in Ruby with minimal effort
    - it is also a server that can run locally on the machine

:: Routes ::
    Q: What are Routes?
    A: A route is an HTTP method paired with a URL-matching pattern
    - Each route is associated with a block

    Examples)
    get '/' do
        ... show something ...
    end

    post '/' do
        ... create something ...
    end

    put '/' do
        ... replace something ...
    end

    patch '/' do
        ... modify something ...
    end

    delete '/' do
        ... annihilate something ...
    end

    options '/' do
        ... appease something ...
    end

    link '/' do
        ... affiliate something ...
    end

    unlink '/' do
        ... separate something ...
    end

- Routes are matched the order they are defined
- Routes with trailing slashes are different from ones without
    get '/foo' do
        # Does not match "GET /foo/"
    end

Route patterns may include named parameters, accessible via params hash:
    get '/hello/:name' do
        # matches "GET /hello/foo" and "GET /hello/bar"
        # params['name'] is 'foo' or 'bar'
        "Hello #{params[ 'name' ]}!"
    end

Route patterns may also include splat (or wildcard) params
accessible via the params ['splat'] array:
    get '/say/*/to/*' do
        # matches /say/hello/to/world
        params['splat'] # => ["hello", "world"]
    end

    get '/download/*.*' do
        # matches /download/path/to/file.xml
        params['splat'] # => ["path/to/file", "xml"]
    end

Works with block parameters too:
    get '/download/*.*' do |path, ext|
        [path, ext] # => ["path/to/file", "xml"]
    end

Route matching with regular expressions (or with block parameter)

Route patterns may have optional parameters
    get '/posts/:format?' do
        # matches "GET /posts/" and
        # any extension "GET /posts/json", "GET /posts/xml"
    end

Routes may also utilize query parameters
    get '/posts' do
        # matches "GET /posts?title=foo&author=bar"
        title = params['title']
        author = params['author']
        # uses title and author variables; query is optional to the /posts route


:: Conditions ::
    - Routes may include a variety of matching conditions, such as user agent

get '/foo', :agent => /Songbird (\d\.\d)[\d\/]*?/ do
    "You're using Songbird version #{params['agent'][0]}"
end

get '/foo' do
    # Matches non-songbird browsers
end

:: Return Values ::
    - Return value of a block determines at least the response
    body passed on to the HTTP client, or at least the next
    middleware in the Rack stack.
    - Most commonly is a string, but other values are accepted

    Can return any object that can either be:
        1. valid Rack response
        2. Rack body object
        3. HTTP status code

    examples)
        - an array with 3 elements [status(Fixnum), headers (Hash), response body (response to #each)]
        - an array with 2 elements [status (Fixnum), response body (responds to #each)]
        - an object (possibly a response only) that responds to #each and passes nothing but strings to given block
        - A fixnum representing the status code

:: Custom Route Matchers ::
    - With Sinatra we can make our own Matchers
    using String patterns and regex as route matches

:: Stopped at Static Files (soo much....) ::